plugins {
    id 'java'
    id 'idea'
    id 'groovy'
    id 'signing'
    id 'java-library'
    id 'maven-publish'
    id 'org.jenkins-ci.jpi' version '0.49.0'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.github.joutvhu.jenkins'
version = '1.0.0-SNAPSHOT'
description = 'Trigger the Multi-Branch Pipeline Job after it is created'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def snapshotVersion = version.endsWith('-SNAPSHOT') || version.endsWith('.SNAPSHOT')

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://repo.jenkins-ci.org/public'
    }
}

ext {
    versions = [
    ]
    managedVersions = [
    ]
    otherVersions = [
    ]
    optionalDependencies = [
    ]
}

dependencyManagement {
    imports {
        mavenBom 'io.jenkins.tools.bom:bom-2.302.x:923.v08bdc07cd40f'
    }
    dependencies {
        ext.managedVersions.each {
            dependency "${it.key}:${ext.versions[it.value]}"
        }
    }
}

dependencies {
    implementation 'org.jenkins-ci.plugins.workflow:workflow-multibranch'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testImplementation(platform('org.junit:junit-bom:5.10.0'))
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
}

jar {
    enabled = true
    manifest {
        attributes 'Built-By': 'joutvhu (Giáo Hồ)'
        attributes 'Build-Date': java.time.Instant.now().toString()
        attributes 'Bundle-Name': 'Multibranch Pipeline Initial Trigger'
        attributes 'Bundle-Vendor': project.group
        attributes 'Bundle-SymbolicName': project.name
        attributes 'Bundle-Version': project.version
    }
//    into("META-INF/maven/${project.group}/${project.name}") {
//        from {
//            generatePomFileForMavenPublication
//        }
//        rename {
//            it.replace('pom-default.xml', 'pom.xml')
//        }
//    }
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    with jar
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives fatJar, sourcesJar, javadocJar
}

test {
    useJUnitPlatform()
    filter {
        includeTestsMatching 'com.joutvhu.*'
    }
}

jenkinsPlugin {
    jenkinsVersion = '2.300'
    shortName = project.name
    displayName = 'Multibranch Pipeline Initial Trigger'
    gitHubUrl = 'https://github.com/joutvhu/multibranch-pipeline-initial-trigger'
    scmTag = "v$version"
    pluginFirstClassLoader = false
    compatibleSinceVersion = version
    maskClasses = 'com.joutvhu.jenkins'
    configureRepositories = false
    configurePublishing = false
    fileExtension = 'hpi'

    workDir = file('/tmp/jenkins')

    repoUrl = 'https://repo.jenkins-ci.org/releases'
    snapshotRepoUrl = 'https://repo.jenkins-ci.org/snapshots'

    developers {
        developer {
            id = 'joutvhu'
            name = 'Giáo Hồ'
            email = 'joutvhu@gmail.com'
        }
    }

    licenses {
        license {
            name = 'MIT License'
            url = 'https://github.com/joutvhu/multibranch-pipeline-initial-trigger/blob/main/LICENSE'
        }
    }

    enableSpotBugs()
//    enableCheckstyle()
    enableJacoco()
}

//publishing {
//    publications {
//        maven(MavenPublication) {
//            groupId = group
//            artifactId = project.name
//            artifacts = [fatJar, sourcesJar, javadocJar]
//            version = version
//
//            pom {
//                name = project.name
//                description = description
//                url = 'https://github.com/joutvhu/multibranch-pipeline-initial-trigger'
//                licenses {
//                    license {
//                        name = 'MIT License'
//                        url = 'https://github.com/joutvhu/multibranch-pipeline-initial-trigger/blob/main/LICENSE'
//                    }
//                }
//                developers {
//                    developer {
//                        id = 'joutvhu'
//                        name = 'Giáo Hồ'
//                        email = 'joutvhu@gmail.com'
//                    }
//                }
//                scm {
//                    connection = 'scm:git:git@github.com:joutvhu/multibranch-pipeline-initial-trigger.git'
//                    developerConnection = 'scm:git:git@github.com:joutvhu/multibranch-pipeline-initial-trigger.git'
//                    url = 'https://github.com/joutvhu/multibranch-pipeline-initial-trigger'
//                }
//                issueManagement {
//                    system = 'Github Issue'
//                    url = 'https://github.com/joutvhu/multibranch-pipeline-initial-trigger/issues'
//                }
//                organization {
//                    name = 'Giáo Hồ'
//                    url = 'https://github.com/joutvhu'
//                }
//                properties = project.ext.versions instanceof Map ? project.ext.versions : new HashMap<>()
//                withXml {
//                    def pomNode = asNode();
//                    def dependencyManagement = pomNode.get('dependencyManagement')
//                    if (dependencyManagement.dependencies.dependency.isEmpty()) {
//                        pomNode.remove(dependencyManagement)
//                    } else {
//                        dependencyManagement.dependencies.dependency.each {
//                            def key = "${it.groupId.text()}:${it.artifactId.text()}"
//                            def versionProperty = project.ext.managedVersions[key]
//                            if (versionProperty == null) {
//                                versionProperty = project.ext.otherVersions[key]
//                            }
//                            if (versionProperty) {
//                                it.version[0].setValue("\${$versionProperty}")
//                            }
//                        }
//                    }
//
//                    def dependenciesNode = pomNode.appendNode('dependencies')
//                    if (configurations.implementation.allDependencies.isEmpty()) {
//                        pomNode.remove(dependenciesNode)
//                    } else {
//                        configurations.implementation.allDependencies.each {
//                            def dependencyNode = dependenciesNode.appendNode('dependency')
//                            dependencyNode.appendNode('groupId', it.group)
//                            dependencyNode.appendNode('artifactId', it.name)
//                            if (it.version != null) {
//                                dependencyNode.appendNode('version', it.version)
//                            }
//                            def key = "${it.group}:${it.name}"
//                            if (project.ext.optionalDependencies.any { el -> el.contains(key) }) {
//                                dependencyNode.appendNode('optional', true)
//                            }
//                        }
//                    }
//                }
//            }
//        }
//    }
//    repositories {
//        maven {
//            name = 'sonatype'
//            if (snapshotVersion) {
//                url = 'https://oss.sonatype.org/content/repositories/snapshots'
//            } else {
//                url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
//            }
//            credentials {
//                username = project.ossrhUsername
//                password = project.ossrhPassword
//            }
//        }
//        maven {
//            name = 'github'
//            url = "https://maven.pkg.github.com/joutvhu/multibranch-pipeline-initial-trigger"
//            credentials {
//                username = project.githubUsername
//                password = project.githubPassword
//            }
//        }
//    }
//}
//
//signing {
//    sign publishing.publications.maven
//}
//
//tasks.publishMavenPublicationToGithubRepository.configure {
//    onlyIf { !snapshotVersion }
//}
