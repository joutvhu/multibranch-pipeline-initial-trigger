plugins {
    id 'java'
    id 'idea'
    id 'groovy'
    id 'signing'
    id 'java-library'
    id 'maven-publish'
    id 'org.jenkins-ci.jpi' version '0.49.0'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.github.joutvhu.jenkins.plugins'
version = '1.0.0'
description = 'Trigger the Multi-Branch Pipeline Job after it is created'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def snapshotVersion = version.endsWith('-SNAPSHOT') || version.endsWith('.SNAPSHOT')

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://repo.jenkins-ci.org/public'
    }
}

ext {
    versions = [
    ]
    managedVersions = [
    ]
    otherVersions = [
    ]
    optionalDependencies = [
    ]
}

dependencyManagement {
    imports {
        mavenBom 'io.jenkins.tools.bom:bom-2.302.x:923.v08bdc07cd40f'
    }
    dependencies {
        ext.managedVersions.each {
            dependency "${it.key}:${ext.versions[it.value]}"
        }
    }
}

dependencies {
    implementation 'org.jenkins-ci.plugins.workflow:workflow-multibranch'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testImplementation(platform('org.junit:junit-bom:5.10.0'))
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
}

jar {
    enabled = true
    manifest {
        attributes 'Built-By': 'joutvhu (Giáo Hồ)'
        attributes 'Build-Date': java.time.Instant.now().toString()
        attributes 'Bundle-Name': 'Multibranch Pipeline Initial Trigger'
        attributes 'Bundle-Vendor': project.group
        attributes 'Bundle-SymbolicName': project.name
        attributes 'Bundle-Version': project.version
    }
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    with jar
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives fatJar, sourcesJar, javadocJar
}

test {
    useJUnitPlatform()
    filter {
        includeTestsMatching 'com.joutvhu.*'
    }
}

jenkinsPlugin {
    jenkinsVersion = '2.300'
    shortName = project.name
    displayName = 'Multibranch Pipeline Initial Trigger'
    gitHubUrl = 'https://github.com/joutvhu/multibranch-pipeline-initial-trigger'
    scmTag = "v$version"
    pluginFirstClassLoader = false
    compatibleSinceVersion = version
    maskClasses = 'com.joutvhu.jenkins'
    configureRepositories = false
    configurePublishing = false
    fileExtension = 'hpi'

    workDir = file('/tmp/jenkins')

    repoUrl = 'https://repo.jenkins-ci.org/releases'
    snapshotRepoUrl = 'https://repo.jenkins-ci.org/snapshots'

    developers {
        developer {
            id = 'joutvhu'
            name = 'Giáo Hồ'
            email = 'joutvhu@gmail.com'
        }
    }

    licenses {
        license {
            name = 'MIT License'
            url = 'https://github.com/joutvhu/multibranch-pipeline-initial-trigger/blob/main/LICENSE'
        }
    }

    enableSpotBugs()
    enableJacoco()
}
